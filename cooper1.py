# copier_final_perfected.py
import os
import sys
import csv
import subprocess
import logging
import time
import yaml
import json
from pathlib import Path
from rich.console import Console
from rich.progress import Progress, BarColumn, TextColumn, TaskProgressColumn, TransferSpeedColumn, TimeRemainingColumn
from rich.panel import Panel
from rich.layout import Layout
from rich.live import Live
from rich.table import Table
from rich.logging import RichHandler
from rich.prompt import Confirm
from rich.filesize import decimal
from concurrent.futures import ThreadPoolExecutor, as_completed
from threading import Lock, get_ident
from collections import defaultdict

console = Console()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
CONFIG_FILE = "config.yaml"
SESSION_FILE = "session.json"
DEFAULT_CONFIG = {
    'mount_points': ["/mnt/disk1", "/mnt/disk2"],
    'threshold': 98.0,
    'state_file': "copier_state.csv",
    'mapping_file': "mapping.csv",
    'error_log_file': "errors.log",
    'dry_run': False,
    'threads': 8
}

logging.basicConfig(level="INFO", format="%(message)s", datefmt="[%X]", handlers=[RichHandler(rich_tracebacks=True, show_path=False)])
log = logging.getLogger("rich")

# –≠—Ç–æ—Ç set –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π load_previous_state
copied_files = set()
file_lock = Lock()
worker_stats = defaultdict(lambda: {"status": "[grey50]–û–∂–∏–¥–∞–Ω–∏–µ...[/grey50]", "speed": 0})

# --- –ö–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ ---
class DiskManager:
    def __init__(self, mount_points, threshold):
        self.mount_points=mount_points;self.threshold=threshold;self.active_disk=None;self.lock=Lock();self._select_initial_disk()
    def _get_disk_usage(self,path):
        try:st=os.statvfs(path);used=(st.f_blocks-st.f_bfree)*st.f_frsize;total=st.f_blocks*st.f_frsize;return round(used/total*100,2)if total>0 else 0,used,total
        except FileNotFoundError:return 100,0,0
    def _select_initial_disk(self):
        for mount in self.mount_points:
            percent,_,_=self._get_disk_usage(mount)
            if percent<self.threshold:self.active_disk=mount;return
        self.active_disk=None
    def get_current_destination(self):
        with self.lock:
            if not self.active_disk:raise RuntimeError("üõë –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Å–∫–æ–≤: –≤—Å–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            percent,_,_=self._get_disk_usage(self.active_disk)
            if percent>=self.threshold:
                log.warning(f"–î–∏—Å–∫ [bold]{self.active_disk}[/bold] –∑–∞–ø–æ–ª–Ω–µ–Ω. –ò—â—É —Å–ª–µ–¥—É—é—â–∏–π...")
                try:current_index=self.mount_points.index(self.active_disk);next_disks=self.mount_points[current_index+1:]
                except ValueError:next_disks=self.mount_points
                self.active_disk=None
                for mount in next_disks:
                    p,_,_=self._get_disk_usage(mount)
                    if p<self.threshold:self.active_disk=mount;log.info(f"–ü–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ –¥–∏—Å–∫: [bold green]{self.active_disk}[/bold green]");break
            if not self.active_disk:raise RuntimeError("üõë –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Å–∫–æ–≤: –≤—Å–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return self.active_disk
    def get_all_disks_status(self):
        statuses=[];
        for m in self.mount_points:percent,_,_=self._get_disk_usage(m);statuses.append((m,percent))
        return statuses

def load_config():
    config=DEFAULT_CONFIG.copy()
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE) as f:user_config=yaml.safe_load(f) or {};config.update(user_config)
        except Exception as e:console.print(f"[bold red]–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {CONFIG_FILE}: {e}. –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.[/bold red]")
    else:
        with open(CONFIG_FILE,'w') as f:yaml.dump(config,f,sort_keys=False,allow_unicode=True)
    return config

def load_previous_state(state_file):
    if os.path.exists(state_file):
        try:
            with open(state_file, newline='', encoding='utf-8') as f:
                reader = csv.reader(f)
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è, –ø—Ä–µ–∂–¥–µ —á–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å
                copied_files.update(str(Path(row[0])) for row in reader if row)
        except Exception as e:
            log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è {state_file}: {e}")


def write_mapping_and_state(config,src,dest):
    with file_lock:
        with open(config['mapping_file'],"a",newline='',encoding='utf-8') as f_map:csv.writer(f_map).writerow([src,dest])
        with open(config['state_file'],"a",newline='',encoding='utf-8') as f_state:csv.writer(f_state).writerow([src])

def save_session(files,source_root):
    session_data={'files_to_copy':files,'source_root':str(source_root)};
    with open(SESSION_FILE,'w',encoding='utf-8') as f:json.dump(session_data,f,indent=2)

def load_session():
    if os.path.exists(SESSION_FILE):
        with open(SESSION_FILE,'r',encoding='utf-8') as f:return json.load(f)
    return None

def clear_session():
    if os.path.exists(SESSION_FILE):os.remove(SESSION_FILE)

def get_files_to_copy():
    session = load_session()
    if session:
        console.print("[bold yellow]–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–µ—Ä–≤–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è.[/bold yellow]")
        if Confirm.ask("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏?", default=True):
            console.print("[green]–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–µ—Ä–≤–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é...[/green]")
            return session['files_to_copy'], session['source_root']
        else:
            # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—Å–µ –ø–æ—á–∏—Å—Ç–∏—Ç—å
            if Confirm.ask("[bold red]–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (state, mapping, logs) –∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å –Ω—É–ª—è?[/bold red]", default=False):
                config = load_config()
                for f_key in ['state_file', 'mapping_file', 'error_log_file']:
                    f_path = config.get(f_key)
                    if f_path and os.path.exists(f_path):
                        os.remove(f_path)
                        log.info(f"–§–∞–π–ª [yellow]{f_path}[/yellow] —É–¥–∞–ª–µ–Ω.")
                console.print("[green]–í—Å–µ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.[/green]")
            clear_session()

    console.print("\n[bold]–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ñ–∞–π–ª–æ–≤:[/bold]");console.print(" [cyan]1[/cyan]) –ò–∑ —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—É—Ç–µ–π");console.print(" [cyan]2[/cyan]) –ò–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)")
    choice=console.input("[yellow]–í–∞—à –≤—ã–±–æ—Ä (1-2):[/yellow] ");files_to_copy,source_root=[],None
    if choice=='1':
        file_list_path=console.input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–ø–∏—Å–∫–æ–º: ").strip()
        with open(file_list_path,encoding='utf-8') as f:files_to_copy=[line.strip()for line in f if line.strip()]
        source_root=os.path.commonpath(files_to_copy)if files_to_copy else None
    elif choice=='2':
        source_root_str = console.input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ").strip()
        source_root = Path(source_root_str).expanduser().resolve() # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ~ –∏ –ø–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
        files_to_copy=[str(p)for p in source_root.rglob("*")if p.is_file()and not p.is_symlink()]
    else:console.print("[red]–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.[/red]");sys.exit(1)

    if not source_root:console.print("[red]–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–∞. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.[/red]");sys.exit(1)
    
    save_session(files_to_copy,source_root)
    return files_to_copy,str(source_root)

def copy_file(src, source_root, config, disk_manager):
    thread_id = get_ident()
    short_src = Path(src).name
    worker_stats[thread_id]['status'] = f"[yellow]–ö–æ–ø–∏—Ä—É—é:[/] {short_src}"

    try:
        start_time = time.monotonic()
        file_size = os.path.getsize(src)
        dest_root = disk_manager.get_current_destination()
        rel_path = os.path.relpath(src, start=source_root)
        dest_path = os.path.join(dest_root, rel_path)
        os.makedirs(os.path.dirname(dest_path), exist_ok=True)

        if config['dry_run']:
            time.sleep(0.01) # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º -a (–∞—Ä—Ö–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º) –∏ -c (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —á–µ–∫-—Å—É–º–º–µ)
            subprocess.run(["rsync", "-ac", src, dest_path], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            write_mapping_and_state(config, src, dest_path)

        elapsed_time = time.monotonic() - start_time
        speed = file_size / elapsed_time if elapsed_time > 0 else 0

        worker_stats[thread_id]['status'] = "[green]–°–≤–æ–±–æ–¥–µ–Ω[/green]"
        worker_stats[thread_id]['speed'] = speed
        return src, file_size

    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {src}: {e}")
        worker_stats[thread_id]['status'] = f"[red]–û—à–∏–±–∫–∞:[/] {short_src}"
        worker_stats[thread_id]['speed'] = -1
        with open(config['error_log_file'], "a", encoding='utf-8') as f_err:
            f_err.write(f"{time.asctime()};{src};{e}\n")
        return None, 0

def make_layout() -> Layout:
    layout=Layout(name="root");layout.split_column(Layout(name="top"),Layout(name="middle"),Layout(name="bottom"));return layout

def generate_disks_panel(disk_manager: DiskManager, config) -> Panel:
    table=Table(box=None,expand=True);table.add_column("–î–∏—Å–∫",style="white",no_wrap=True);table.add_column("–ó–∞–ø–æ–ª–Ω–µ–Ω–æ",style="green",ratio=1);table.add_column("%",style="bold",justify="right")
    for mount,percent in disk_manager.get_all_disks_status():
        color="green" if percent<config['threshold'] else "red";bar=Progress(BarColumn(bar_width=None,style=color,complete_style=color),expand=True)
        task_id=bar.add_task("disk_usage",total=100);bar.update(task_id,completed=percent)
        is_active=" (*)" if mount==disk_manager.active_disk else "";table.add_row(f"[bold]{mount}{is_active}[/bold]",bar,f"{percent:.1f}%")
    return Panel(table,title="üì¶ –î–∏—Å–∫–∏",border_style="blue")

def generate_workers_panel() -> Panel:
    table=Table(expand=True);table.add_column("–ü–æ—Ç–æ–∫",justify="center",style="cyan",width=12);table.add_column("–°—Ç–∞—Ç—É—Å",style="white",no_wrap=True,ratio=2);table.add_column("–°–∫–æ—Ä–æ—Å—Ç—å",justify="right",style="magenta",width=15)
    for tid in sorted(worker_stats.keys()):
        stats=worker_stats[tid]
        speed_str=""
        if stats['speed']>0:speed_str=f"{decimal(stats['speed'])}/s"
        elif stats['speed']==-1:speed_str="[red]ERROR[/red]"
        else:speed_str="[dim]---[/dim]"
        table.add_row(str(tid),stats['status'],speed_str)
    return Panel(table,title="üë∑ –ü–æ—Ç–æ–∫–∏",border_style="green")

def main():
    config = load_config()
    console.rule(f"[bold]Data Copier[/bold] | –†–µ–∂–∏–º: {'Dry Run' if config['dry_run'] else '–†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ'}")

    # 1. –°–ù–ê–ß–ê–õ–ê –ø–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —ç—Ç—É —Å–µ—Å—Å–∏—é (–Ω–æ–≤—É—é –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π)
    files_to_copy, source_root = get_files_to_copy()

    # 2. –¢–ï–ü–ï–†–¨ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∏–∑ –≠–¢–û–ô –∑–∞–¥–∞—á–∏ —É–∂–µ —Å–¥–µ–ª–∞–Ω–æ
    load_previous_state(config['state_file'])

    # 3. –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, –Ω–æ—Ä–º–∞–ª–∏–∑—É—è –ø—É—Ç–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    files_to_process = [f for f in files_to_copy if str(Path(f).resolve()) not in copied_files]

    if not files_to_process:
        console.print("[bold green]‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ —É–∂–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.[/bold green]")
        clear_session()
        return

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    copied_in_this_session = len(files_to_copy) - len(files_to_process)
    total_files_to_process = len(files_to_process)
    console.print(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –∑–∞–¥–∞–Ω–∏–∏: [bold]{len(files_to_copy)}[/bold]. –£–∂–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: [bold]{copied_in_this_session}[/bold]. –û—Å—Ç–∞–ª–æ—Å—å: [bold green]{total_files_to_process}[/bold green]")

    disk_manager = DiskManager(config['mount_points'], config['threshold'])

    file_counter_column = TextColumn(f"[cyan]0/{total_files_to_process} —Ñ–∞–π–ª–æ–≤[/cyan]")

    try:
        # –°—á–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–æ–ª—å–∫–æ —Ç–µ—Ö —Ñ–∞–π–ª–æ–≤, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        total_size = sum(os.path.getsize(f) for f in files_to_process)
    except FileNotFoundError:
        log.error("–û–¥–∏–Ω –∏–∑ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ.")
        sys.exit(1)

    progress = Progress(
        TextColumn("[bold blue]–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:[/bold blue]"),
        BarColumn(),
        TaskProgressColumn(),
        TextColumn("‚Ä¢"),
        file_counter_column,
        TextColumn("‚Ä¢"),
        TransferSpeedColumn(),
        TextColumn("‚Ä¢"),
        TimeRemainingColumn(),
    )

    main_task = progress.add_task("–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", total=total_size)

    layout = make_layout()
    layout["top"].update(generate_disks_panel(disk_manager, config))
    layout["middle"].update(generate_workers_panel())
    layout["bottom"].update(Panel(progress, title="üöÄ –ü—Ä–æ—Ü–µ—Å—Å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", border_style="magenta"))

    copy_successful = True
    files_completed_count = 0
    try:
        with Live(layout, screen=True, redirect_stderr=False, vertical_overflow="visible") as live:
            with ThreadPoolExecutor(max_workers=config['threads']) as executor:
                # –ü–µ—Ä–µ–¥–∞–µ–º source_root –≤ submit
                future_to_file = {executor.submit(copy_file, src, source_root, config, disk_manager): src for src in files_to_process}

                for future in as_completed(future_to_file):
                    src, size_copied = future.result()
                    files_completed_count += 1

                    if src is None:
                        copy_successful = False

                    progress.update(main_task, advance=size_copied)
                    file_counter_column.text_format = f"[cyan]{files_completed_count}/{total_files_to_process} —Ñ–∞–π–ª–æ–≤[/cyan]"

                    layout["top"].update(generate_disks_panel(disk_manager, config))
                    layout["middle"].update(generate_workers_panel())
    except (Exception, KeyboardInterrupt):
        console.print("\n[bold red]–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏.[/bold red]")
        console.print("[yellow]–°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.[/yellow]")
        sys.exit(1)

    if copy_successful and progress.finished:
        console.rule("[bold green]‚úÖ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ[/bold green]")
        clear_session()
    else:
        console.rule("[bold yellow]–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ –±—ã–ª–∏ –æ—à–∏–±–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥.[/bold yellow]")
        console.print("[yellow]–°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–Ω–æ–≤–∞.[/yellow]")

if __name__ == "__main__":
    main()
