# archiver_copier_v2.py
# –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–∫–µ—Ç–æ–≤ uv:
# 1. uv venv
# 2. source .venv/bin/activate (–∏–ª–∏ .\.venv\Scripts\activate –≤ Windows)
# 3. uv pip install -r requirements.txt

import os
import sys
import csv
import subprocess
import logging
import time
import yaml
import re
import tarfile
import argparse
from pathlib import Path
from rich.console import Console
from rich.progress import Progress, BarColumn, TextColumn, TaskProgressColumn, TransferSpeedColumn, TimeRemainingColumn
from rich.panel import Panel
from rich.layout import Layout
from rich.live import Live
from rich.table import Table
from rich.logging import RichHandler
from rich.filesize import decimal
from rich.prompt import Prompt
from concurrent.futures import ThreadPoolExecutor, as_completed
from threading import Lock, get_ident
from collections import defaultdict

console = Console()

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–ï–†–°–ò–Ø ---
__version__ = "2.1.0"
# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
CONFIG_FILE = "config.yaml"
DEFAULT_CONFIG = {
    'mount_points': ["/mnt/disk1", "/mnt/disk2"],
    'source_base_path': None,
    'threshold': 98.0,
    'state_file': "copier_state.csv",
    'mapping_file': "mapping.csv",
    'dry_run_mapping_file': "dry_run_mapping.csv",
    'error_log_file': "errors.log",
    'source_root': '/mnt/cifs/raidix/#NEW_FILMS/@PO_ALFAVITU/',       # –ì–¥–µ –∏—Å–∫–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
    'destination_root': '/raidix/#NEW_FILMS/@PO_ALFAVITU/',                          # –ö–∞–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞ –¥–∏—Å–∫–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    'dry_run': False,
    'threads': 8,
    'min_files_for_sequence': 50 ,
    'image_extensions': ['dpx','cri', 'tiff', 'tif', 'exr', 'png', 'jpg', 'jpeg', 'tga', 'j2c', 'png']
}
SEQUENCE_RE = re.compile(r'^(.*?)[\._]*(\d+)\.([a-zA-Z0-9]+)$', re.IGNORECASE)

logging.basicConfig(level="INFO", format="%(message)s", datefmt="[%X]", handlers=[RichHandler(rich_tracebacks=True, show_path=False, console=console)])
log = logging.getLogger("rich")

processed_items_keys = set()
file_lock = Lock()
worker_stats = defaultdict(lambda: {"status": "[grey50]–û–∂–∏–¥–∞–Ω–∏–µ...[/grey50]", "speed": 0})

# --- –ö–ª–∞—Å—Å—ã –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

class DiskManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±–æ—Ä–æ–º –¥–∏—Å–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ø–æ—Ä–æ–≥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è."""
    def __init__(self, mount_points, threshold):
        self.mount_points = mount_points
        self.threshold = threshold
        self.active_disk = None
        self.lock = Lock()
        self._select_initial_disk()

    def _get_disk_usage(self, path):
        if not os.path.exists(path): return 0.0
        try:
            st = os.statvfs(path)
            used = (st.f_blocks - st.f_bfree) * st.f_frsize
            total = st.f_blocks * st.f_frsize
            return round(used / total * 100, 2) if total > 0 else 0
        except FileNotFoundError: return 100

    def _select_initial_disk(self):
        for mount in self.mount_points:
            if not os.path.exists(mount):
                log.warning(f"–¢–æ—á–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è [bold yellow]{mount}[/bold yellow] –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
                continue
            if self._get_disk_usage(mount) < self.threshold:
                self.active_disk = mount
                log.info(f"–í—ã–±—Ä–∞–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π –¥–∏—Å–∫: [bold green]{self.active_disk}[/bold green]")
                return
        log.error("üõë –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–∏—Å–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")

    def get_current_destination(self):
        with self.lock:
            if not self.active_disk: raise RuntimeError("üõë –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Å–∫–æ–≤.")
            if self._get_disk_usage(self.active_disk) >= self.threshold:
                log.warning(f"–î–∏—Å–∫ [bold]{self.active_disk}[/bold] –∑–∞–ø–æ–ª–Ω–µ–Ω. –ò—â—É —Å–ª–µ–¥—É—é—â–∏–π...")
                available_disks = [m for m in self.mount_points if os.path.exists(m)]
                try:
                    current_index = available_disks.index(self.active_disk)
                    next_disks = available_disks[current_index + 1:] + available_disks[:current_index]
                except (ValueError, IndexError): next_disks = available_disks
                self.active_disk = next((m for m in next_disks if self._get_disk_usage(m) < self.threshold), None)
                if self.active_disk: log.info(f"–ü–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ –¥–∏—Å–∫: [bold green]{self.active_disk}[/bold green]")
            if not self.active_disk: raise RuntimeError("üõë –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Å–∫–æ–≤: –≤—Å–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return self.active_disk

    def get_all_disks_status(self):
        return [(m, self._get_disk_usage(m)) for m in self.mount_points]

def load_config():
    config = DEFAULT_CONFIG.copy()
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f: config.update(yaml.safe_load(f) or {})
        except Exception as e: console.print(f"[bold red]–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {CONFIG_FILE}: {e}. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.[/bold red]")
    else:
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f: yaml.dump(DEFAULT_CONFIG, f, sort_keys=False, allow_unicode=True)
        log.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: [cyan]{CONFIG_FILE}[/cyan]")
    config['image_extensions'] = set(e.lower() for e in config.get('image_extensions', []))
    return config

def load_previous_state(state_file):
    if os.path.exists(state_file):
        try:
            with open(state_file, 'r', encoding='utf-8') as f: processed_items_keys.update(row[0] for row in csv.reader(f) if row)
            log.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ [bold]{len(processed_items_keys)}[/bold] –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")
        except Exception as e: log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è {state_file}: {e}")

# –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Ü–µ–ª–∏–∫–æ–º
def write_log(state_log_file, mapping_log_file, key, dest_path=None, is_dry_run=False):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ state –∏ mapping —Ñ–∞–π–ª—ã.
    –í —Ä–µ–∂–∏–º–µ dry-run –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ mapping_log_file.
    """
    with file_lock:
        if not is_dry_run:
            with open(state_log_file, "a", newline='', encoding='utf-8') as f:
                csv.writer(f).writerow([key])

        if dest_path:
            with open(mapping_log_file, "a", newline='', encoding='utf-8') as f:
                csv.writer(f).writerow([key, dest_path])

def find_sequences(dirs, config):
    all_sequences, sequence_files = [], set()
    for dir_path, files_with_sizes in dirs.items():
        sequences_in_dir = defaultdict(list)
        for filename, file_size in files_with_sizes:
            match = SEQUENCE_RE.match(filename)
            if match and match.group(3).lower() in config['image_extensions']:
                prefix, frame, ext = match.groups()
                full_path = os.path.join(dir_path, filename)
                sequences_in_dir[(prefix, ext.lower())].append((int(frame), full_path, file_size))

        for (prefix, ext), file_tuples in sequences_in_dir.items():
            if len(file_tuples) >= config['min_files_for_sequence']:
                file_tuples.sort()
                frames, full_paths, sizes = zip(*file_tuples)
                min_frame, max_frame = min(frames), max(frames)

                # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
                # –†–∞–∑–±–∏–≤–∞–µ–º –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å UnboundLocalError
                safe_prefix = re.sub(r'[^\w\.\-]', '_', prefix.strip())
                tar_filename = f"{safe_prefix}.{min_frame:04d}-{max_frame:04d}.{ext}.tar"

                virtual_tar_path = os.path.join(dir_path, tar_filename)
                all_sequences.append({
                    'type': 'sequence',
                    'key': virtual_tar_path,
                    'dir_path': dir_path,
                    'tar_filename': tar_filename,
                    'source_files': list(full_paths),
                    'size': sum(sizes)
                })
                sequence_files.update(full_paths)
    return all_sequences, sequence_files

# --- –ò–ó–ú–ï–ù–ï–ù–û: –§—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É –¥–ª—è TUI ---
# –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Ü–µ–ª–∏–∫–æ–º
# –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Ü–µ–ª–∏–∫–æ–º
# –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Ü–µ–ª–∏–∫–æ–º
# –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Ü–µ–ª–∏–∫–æ–º
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –ù–ï–¢ –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞, –æ–Ω –Ω–∞–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
# from rich.progress import Progress

# ...

# –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Ü–µ–ª–∏–∫–æ–º
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã –µ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
from rich.live import Live
from rich.text import Text

# –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Ü–µ–ª–∏–∫–æ–º
# –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Ü–µ–ª–∏–∫–æ–º
# –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Ü–µ–ª–∏–∫–æ–º
def analyze_and_plan_jobs(input_csv_path, config):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç CSV, –∏—Å–ø–æ–ª—å–∑—É—è –¥–≤—É—Ö—Å—Ç—É–ø–µ–Ω—á–∞—Ç—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ
    –æ—Ö–≤–∞—Ç–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å—Ç—Ä–æ–∫.
    """
    console.rule("[yellow]–®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ[/]")
    console.print(f"–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: [bold cyan]{input_csv_path}[/bold cyan]")

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–≤—É—Ö—Å—Ç—É–ø–µ–Ω—á–∞—Ç–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤ ---
    # 1. –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Å—Ç—Ä–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∞ "path","type",...
    parser_primary = re.compile(r'^"([^"]+)","([^"]+)",.*')
    # 2. –ó–∞–ø–∞—Å–Ω–æ–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Å—Ç—Ä–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∞ "path",regular f,...
    #    –û–Ω –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—É—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–∞–π–ª (–µ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ)
    parser_fallback = re.compile(r'^"([^"]+\.\w{2,5})",.*', re.IGNORECASE)


    dirs, all_files_from_csv = defaultdict(list), {}
    source_root = config.get('source_root')
    if source_root:
        console.print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ—Ä–µ–Ω—å –∏—Å—Ç–æ—á–Ω–∏–∫–∞: [cyan]{source_root}[/cyan]")

    lines_total = 0
    lines_ignored_dirs = 0
    malformed_lines = []

    try:
        # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        with open(input_csv_path, 'r', encoding='utf-8', errors='ignore') as f:
            total_lines_for_progress = sum(1 for _ in f)

        with Progress(console=console) as progress:
            task = progress.add_task("[green]–ê–Ω–∞–ª–∏–∑ CSV...", total=total_lines_for_progress)

            with open(input_csv_path, 'r', encoding='utf-8', errors='ignore') as f:
                for line in f:
                    progress.update(task, advance=1)
                    lines_total += 1

                    cleaned_line = line.strip().replace('""', '"')
                    if not cleaned_line:
                        malformed_lines.append((lines_total, line, "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞"))
                        continue

                    rel_path, file_type, size = None, "", 0

                    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–µ—Ä—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ ---
                    match = parser_primary.match(cleaned_line)
                    if match:
                        # –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª
                        rel_path, file_type = match.groups()
                    else:
                        match = parser_fallback.match(cleaned_line)
                        if match:
                            # –ó–∞–ø–∞—Å–Ω–æ–π –ø–∞—Ä—Å–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª
                            rel_path = match.group(1)
                            file_type = "file" # –ú—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª

                    if rel_path:
                        # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø—É—Ç—å, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ
                        if 'directory' in file_type:
                            lines_ignored_dirs += 1
                            continue

                        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, —Å—á–∏—Ç–∞–µ–º —Ñ–∞–π–ª–æ–º
                        size_match = re.search(r',"(\d+)"$', cleaned_line)
                        if size_match:
                            try: size = int(size_match.group(1))
                            except (ValueError, IndexError): size = 0

                        absolute_source_path = os.path.join(source_root, rel_path) if source_root else rel_path
                        absolute_source_path = os.path.normpath(absolute_source_path)

                        path_obj = Path(absolute_source_path)
                        dirs[str(path_obj.parent)].append((path_obj.name, size))
                        all_files_from_csv[absolute_source_path] = size
                    else:
                        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –ø–∞—Ä—Å–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                        malformed_lines.append((lines_total, line, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏"))

    except (KeyboardInterrupt, SystemExit):
        console.print("\n[yellow]–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.[/yellow]")
        sys.exit(0)
    except FileNotFoundError: console.print(f"[bold red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: CSV-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_csv_path}[/]"); sys.exit(1)
    except Exception as e: console.print(f"[bold red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV: {e}[/]"); sys.exit(1)

    # ... –æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ (–≤—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞, –º–µ–Ω—é) –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    if not all_files_from_csv:
        if malformed_lines:
            console.print("\n[bold red]–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:[/bold red]")
            for num, err_line, reason in malformed_lines[:50]:
                console.print(f"[dim]–°—Ç—Ä–æ–∫–∞ #{num} ({reason}):[/dim] {err_line}")
        else:
            log.warning("–í CSV –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        sys.exit(0)

    sequences, sequence_files = find_sequences(dirs, config)
    standalone_files = set(all_files_from_csv.keys()) - sequence_files

    jobs = sequences + [{'type': 'file', 'key': f, 'size': all_files_from_csv[f]} for f in standalone_files]
    skipped_from_state = len(jobs) - len([job for job in jobs if job['key'] not in processed_items_keys])
    jobs_to_process = [job for job in jobs if job['key'] not in processed_items_keys]

    if not jobs_to_process:
        log.info("[bold green]‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.[/bold green]")
        return [], None

    jobs_to_process.sort(key=lambda j: j.get('size', 0), reverse=True)

    seq_jobs = [j for j in jobs_to_process if j['type'] == 'sequence']
    file_jobs = [j for j in jobs_to_process if j['type'] == 'file']

    while True:
        console.clear()
        console.rule("[yellow]–û—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É[/]")
        report_table = Table(title=None, show_header=False, box=None, padding=(0, 2))
        report_table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan", no_wrap=True)
        report_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="white", justify="right")

        report_table.add_row("–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ CSV —Ñ–∞–π–ª–µ:", f"{lines_total:,}")
        report_table.add_row("  –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏):", f"[dim]{lines_ignored_dirs:,}[/dim]")

        malformed_count = len(malformed_lines)
        malformed_style = "red" if malformed_count > 0 else "dim"
        report_table.add_row(f"  –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç):", f"[{malformed_style}]{malformed_count:,}[/{malformed_style}]")

        report_table.add_row("[bold]–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:", f"[bold green]{len(all_files_from_csv):,}[/bold green]")
        report_table.add_section()
        report_table.add_row("–ò–∑ –Ω–∏—Ö —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ —Å–µ–∫–≤–µ–Ω—Ü–∏–∏:", f"{len(sequence_files):,}")
        report_table.add_row("  –ß—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞–Ω–∏—è–º –Ω–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏—é:", f"[yellow]{len(sequences):,}[/yellow]")
        report_table.add_row("–û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:", f"{len(standalone_files):,}")
        report_table.add_section()
        report_table.add_row("–í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π –¥–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", f"{len(jobs):,}")
        report_table.add_row("  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã):", f"[dim]{skipped_from_state:,}[/dim]")
        report_table.add_row("[bold]–í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é:", f"[bold bright_magenta]{len(jobs_to_process):,}[/bold bright_magenta]")

        console.print(report_table)

        choices = ["s", "q"]
        prompt_text = "\n[bold]–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ([green]S[/green])—Ç–∞—Ä—Ç / ([red]Q[/red])uit"
        if malformed_count > 0:
            choices.append("e")
            prompt_text += " / ([yellow]E[/yellow])rrors"

        choice = Prompt.ask(prompt_text, choices=choices, default="s").lower()

        if choice == 's':
            break
        elif choice == 'q':
            console.print("[yellow]–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.[/yellow]")
            sys.exit(0)
        elif choice == 'e' and malformed_count > 0:
            console.print("\n[bold yellow]----- –°–ø–∏—Å–æ–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫ (–ø–µ—Ä–≤—ã–µ 50) -----[/bold yellow]")
            for num, line, reason in malformed_lines[:50]:
                console.print(f"[dim]–°—Ç—Ä–æ–∫–∞ #{num} ({reason}):[/dim] {line}")
            console.input("\n[bold]–ù–∞–∂–º–∏—Ç–µ [green]Enter[/green] –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...[/bold]")

    plan_summary = {
        "sequences": {"count": len(seq_jobs), "size": sum(j['size'] for j in seq_jobs)},
        "files": {"count": len(file_jobs), "size": sum(j['size'] for j in file_jobs)},
        "total": {"count": len(jobs_to_process), "size": sum(j['size'] for j in jobs_to_process)},
        "skipped": skipped_from_state
    }

    return jobs_to_process, plan_summary

def archive_sequence_to_destination(job, dest_tar_path):
    try:
        os.makedirs(os.path.dirname(dest_tar_path), exist_ok=True)
        with tarfile.open(dest_tar_path, "w") as tar:
            for file_path in job['source_files']:
                if os.path.exists(file_path): tar.add(file_path, arcname=os.path.basename(file_path))
                else: log.warning(f"–í —Å–µ–∫–≤–µ–Ω—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {file_path}")
        return True
    except Exception as e:
        log.error(f"‚úñ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞ {dest_tar_path}: {e}")
        if os.path.exists(dest_tar_path): os.remove(dest_tar_path)
        return False

# –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Ü–µ–ª–∏–∫–æ–º
# –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Ü–µ–ª–∏–∫–æ–º
# –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Ü–µ–ª–∏–∫–æ–º
def process_job_worker(job, config, disk_manager):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è source_root –∏ destination_root –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—É—Ç–µ–π."""
    thread_id, start_time = get_ident(), time.monotonic()
    is_dry_run = config['dry_run']

    try:
        dest_mount_point = disk_manager.get_current_destination()
        source_root = config.get('source_root')
        destination_root = config.get('destination_root', '/')

        # job['key'] - —ç—Ç–æ –ê–ë–°–û–õ–Æ–¢–ù–´–ô –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º—É –∞—Ä—Ö–∏–≤—É
        absolute_source_key = job['key']

        # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é —á–∞—Å—Ç—å –ø—É—Ç–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤–æ—Å—Å–æ–∑–¥–∞—Ç—å
        if source_root:
            rel_path = os.path.relpath(absolute_source_key, source_root)
        else:
            rel_path = absolute_source_key.lstrip(os.path.sep)

        # –°—Ç—Ä–æ–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        # os.path.join –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ destination_root —Ä–∞–≤–µ–Ω '/'
        dest_path = os.path.join(dest_mount_point, destination_root.lstrip(os.path.sep), rel_path)
        dest_path = os.path.normpath(dest_path)

        if job['type'] == 'sequence':
            short_name = job['tar_filename']
            worker_stats[thread_id]['status'] = f"[yellow]–ê—Ä—Ö–∏–≤–∏—Ä—É—é:[/] {short_name}"

            if not is_dry_run:
                for f in job['source_files']:
                    if not os.path.exists(f): raise FileNotFoundError(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª —Å–µ–∫–≤–µ–Ω—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {f}")
                if not archive_sequence_to_destination(job, dest_path): raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤ {short_name}")
            else: time.sleep(0.01)

            source_keys_to_log = job['source_files']
        else: # 'file'
            short_name = os.path.basename(absolute_source_key)
            worker_stats[thread_id]['status'] = f"[cyan]–ö–æ–ø–∏—Ä—É—é:[/] {short_name}"

            if not is_dry_run:
                if not os.path.exists(absolute_source_key): raise FileNotFoundError(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {absolute_source_key}")
                os.makedirs(os.path.dirname(dest_path), exist_ok=True)
                subprocess.run(["rsync", "-a", "--checksum", absolute_source_key, dest_path], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            else: time.sleep(0.005)

            source_keys_to_log = [absolute_source_key]

        elapsed = time.monotonic() - start_time
        speed = job['size'] / elapsed if elapsed > 0 else 0
        worker_stats[thread_id]['status'] = "[green]–°–≤–æ–±–æ–¥–µ–Ω[/green]"
        worker_stats[thread_id]['speed'] = speed
        return source_keys_to_log, dest_path, job['size'], job['type']

    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {job['key']}: {e}")
        short_name = os.path.basename(job['key'])
        worker_stats[thread_id]['status'] = f"[red]–û—à–∏–±–∫–∞:[/] {short_name}"
        worker_stats[thread_id]['speed'] = -1
        with open(config['error_log_file'], "a", encoding='utf-8') as f: f.write(f"{time.asctime()};{job['key']};{e}\n")
        return None, None, 0, job['type']

# –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Ü–µ–ª–∏–∫–æ–º



# --- –ò–ó–ú–ï–ù–ï–ù–û: –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è TUI —Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—é—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –º–∞–∫–µ—Ç ---
def make_layout() -> Layout:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É TUI."""
    layout = Layout(name="root")
    layout.split_column(
        Layout(name="top", ratio=1),
        Layout(name="middle", ratio=2),
        Layout(name="bottom", size=3) # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    )
    layout["top"].split_row(Layout(name="summary"), Layout(name="disks"))
    return layout

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞–Ω–µ–ª—å —Å–≤–æ–¥–∫–∏ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º ---
def generate_summary_panel(plan, completed) -> Panel:
    table = Table(box=None, expand=True)
    table.add_column("–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è", style="cyan", no_wrap=True)
    table.add_column("–í—ã–ø–æ–ª–Ω–µ–Ω–æ (—à—Ç)", style="green", justify="right")
    table.add_column("–†–∞–∑–º–µ—Ä", style="green", justify="right")

    # –°–µ–∫–≤–µ–Ω—Ü–∏–∏
    s_done = completed['sequence']['count']
    s_total = plan['sequences']['count']
    s_size_done = completed['sequence']['size']
    s_size_total = plan['sequences']['size']
    table.add_row(
        "–ê—Ä—Ö–∏–≤–∞—Ü–∏—è —Å–µ–∫–≤–µ–Ω—Ü–∏–π",
        f"{s_done} / {s_total}",
        f"{decimal(s_size_done)} / {decimal(s_size_total)}"
    )
    # –§–∞–π–ª—ã
    f_done = completed['files']['count']
    f_total = plan['files']['count']
    f_size_done = completed['files']['size']
    f_size_total = plan['files']['size']
    table.add_row(
        "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤",
        f"{f_done} / {f_total}",
        f"{decimal(f_size_done)} / {decimal(f_size_total)}"
    )
    # –í—Å–µ–≥–æ
    t_done = s_done + f_done
    t_total = s_total + f_total
    t_size_done = s_size_done + f_size_done
    t_size_total = s_size_total + f_size_total
    table.add_row(
        "[bold]–í—Å–µ–≥–æ[/bold]",
        f"[bold]{t_done} / {t_total}[/bold]",
        f"[bold]{decimal(t_size_done)} / {decimal(t_size_total)}[/bold]"
    )
    return Panel(table, title="üìä –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", border_style="yellow")

def generate_disks_panel(disk_manager: DiskManager, config) -> Panel:
    table = Table(box=None, expand=True)
    table.add_column("–î–∏—Å–∫", style="white", no_wrap=True)
    table.add_column("–ó–∞–ø–æ–ª–Ω–µ–Ω–æ", style="green", ratio=1)
    table.add_column("%", style="bold", justify="right")
    for mount, percent in disk_manager.get_all_disks_status():
        color = "green" if percent < config['threshold'] else "red"
        bar = Progress(BarColumn(bar_width=None, style=color, complete_style=color), expand=True)
        task_id = bar.add_task("disk_usage", total=100); bar.update(task_id, completed=percent)
        is_active = " (*)" if mount == disk_manager.active_disk else ""
        table.add_row(f"[bold]{mount}{is_active}[/bold]", bar, f"{percent:.1f}%")
    return Panel(table, title="üì¶ –î–∏—Å–∫–∏", border_style="blue")

def generate_workers_panel(threads) -> Panel:
    table = Table(expand=True)
    table.add_column("–ü–æ—Ç–æ–∫", justify="center", style="cyan", width=12)
    table.add_column("–°—Ç–∞—Ç—É—Å", style="white", no_wrap=True, ratio=2)
    table.add_column("–°–∫–æ—Ä–æ—Å—Ç—å", justify="right", style="magenta", width=15)
    sorted_workers = sorted(worker_stats.keys())
    for tid in sorted_workers:
        stats, speed_str = worker_stats[tid], ""
        if stats['speed'] > 0: speed_str = f"{decimal(stats['speed'])}/s"
        elif stats['speed'] == -1: speed_str = "[red]ERROR[/red]"
        else: speed_str = "[dim]---[/dim]"
        table.add_row(str(tid), stats['status'], speed_str)
    return Panel(table, title=f"üë∑ –ü–æ—Ç–æ–∫–∏ ({threads})", border_style="green")

# --- –ò–ó–ú–ï–ù–ï–ù–û: –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º TUI ---
def main(args):
    config = load_config()
    if args.dry_run: config['dry_run'] = True
    if args.source_base: config['source_base_path'] = args.source_base

    base_path = config.get('source_base_path')

    console.rule(f"[bold]Smart Archiver & Copier v{__version__}[/bold] | –†–µ–∂–∏–º: {'Dry Run' if config['dry_run'] else '–†–µ–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞'}")

    is_dry_run = config['dry_run']
    if is_dry_run:
        dry_run_log_path = config['dry_run_mapping_file']
        try:
            with open(dry_run_log_path, 'w', newline='', encoding='utf-8') as f:
                csv.writer(f).writerow(["source_path", "destination_path"])
            console.print(f"–û—Ç—á–µ—Ç dry-run –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: [cyan]{dry_run_log_path}[/cyan]")
        except IOError as e:
            console.print(f"[bold red]–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞ –¥–ª—è dry-run: {e}[/bold red]")

    load_previous_state(config['state_file'])

    jobs_to_process, plan_summary = analyze_and_plan_jobs(args.input_file, config)

    if not jobs_to_process:
        log.info("[bold green]‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.[/bold green]")
        return
    if plan_summary['skipped'] > 0:
        log.info(f"[dim]–ü—Ä–æ–ø—É—â–µ–Ω–æ {plan_summary['skipped']} —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.[/dim]")

    if not is_dry_run:
        disk_manager = DiskManager(config['mount_points'], config['threshold'])
        if not disk_manager.active_disk: return
    else:
        # –î–ª—è dry-run —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        class FakeDiskManager:
            def __init__(self, mount_points):
                self.mount_points = mount_points
                self.active_disk = mount_points[0] if mount_points else "/dry/run/dest"
            def get_current_destination(self): return self.active_disk
            def get_all_disks_status(self): return [(p, 0.0) for p in self.mount_points]
        disk_manager = FakeDiskManager(config['mount_points'])
        log.info("Dry-run: —Å–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –¥–∏—Å–∫.")

    console.rule("[yellow]–®–∞–≥ 2: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ[/]")
    time.sleep(1)

    job_counter_column = TextColumn(f"[cyan]0/{plan_summary['total']['count']} –∑–∞–¥–∞–Ω–∏–π[/cyan]")
    progress = Progress(TextColumn("[bold blue]–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:[/bold blue]"), BarColumn(), TaskProgressColumn(), TextColumn("‚Ä¢"),
                        job_counter_column, TextColumn("‚Ä¢"), TransferSpeedColumn(), TextColumn("‚Ä¢"), TimeRemainingColumn())
    main_task = progress.add_task("–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", total=plan_summary['total']['count'])
    layout = make_layout()
    layout["bottom"].update(Panel(progress, title="üöÄ –ü—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", border_style="magenta", expand=False))

    completed_stats = {"sequence": {"count": 0, "size": 0}, "files": {"count": 0, "size": 0}}
    jobs_completed_count = 0
    all_jobs_successful = True

    state_log = config['state_file']
    mapping_log = config['dry_run_mapping_file'] if is_dry_run else config['mapping_file']

    try:
        with Live(layout, screen=True, redirect_stderr=False, vertical_overflow="visible") as live:
            with ThreadPoolExecutor(max_workers=config['threads']) as executor:
                layout["summary"].update(generate_summary_panel(plan_summary, completed_stats))
                layout["disks"].update(generate_disks_panel(disk_manager, config))
                layout["middle"].update(generate_workers_panel(config['threads']))

                future_to_job = {executor.submit(process_job_worker, job, config, disk_manager): job for job in jobs_to_process}

                for future in as_completed(future_to_job):
                    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞ ---
                    source_keys, dest_path, size_processed, job_type = future.result()

                    if source_keys is not None:
                        # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–ª—é—á —Å –æ–±—â–∏–º –ø—É—Ç–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
                        for key in source_keys:
                            write_log(state_log, mapping_log, key, dest_path, is_dry_run=is_dry_run)

                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è TUI
                        if job_type == 'sequence':
                            completed_stats['sequence']['count'] += 1
                            completed_stats['sequence']['size'] += size_processed
                        else: # 'file'
                            completed_stats['files']['count'] += 1
                            completed_stats['files']['size'] += size_processed
                    else:
                        all_jobs_successful = False

                    jobs_completed_count += 1
                    progress.update(main_task, advance=1)
                    job_counter_column.text_format = f"[cyan]{jobs_completed_count}/{plan_summary['total']['count']} –∑–∞–¥–∞–Ω–∏–π[/cyan]"

                    layout["summary"].update(generate_summary_panel(plan_summary, completed_stats))
                    if not is_dry_run:
                        layout["disks"].update(generate_disks_panel(disk_manager, config))
                    layout["middle"].update(generate_workers_panel(config['threads']))

    except (Exception, KeyboardInterrupt):
        console.print_exception(show_locals=False)
        console.print("\n[bold red]–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω. –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.[/bold red]")
        sys.exit(1)

    if all_jobs_successful and progress.finished:
        console.rule("[bold green]‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã[/bold green]")
    else:
        console.rule("[bold yellow]–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ –±—ã–ª–∏ –æ—à–∏–±–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥.[/bold yellow]")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç CSV, –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –∏ –∫–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.")
    parser.add_argument(
        "-v", "--version",
        action="version",
        version=f"%(prog)s v{__version__}"
    )
    parser.add_argument("input_file", help="–ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
    parser.add_argument("--dry-run", action="store_true", help="–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.")
    parser.add_argument("--source-base", help="–ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –∏–∑ CSV.")
    args = parser.parse_args()
    main(args)
