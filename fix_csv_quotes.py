#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–≤—ã—á–µ–∫ –≤ CSV —Ñ–∞–π–ª–∞—Ö —Å –ø—É—Ç—è–º–∏ —Ñ–∞–π–ª–æ–≤.
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É—Ç–∏ –≤–∏–¥–∞ '–Ω–∞–∑–≤–∞–Ω–∏–µ"' –Ω–∞ '"–Ω–∞–∑–≤–∞–Ω–∏–µ"' –ø—Ä–æ–≤–µ—Ä—è—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ.
"""

import os
import sys
import csv
import re
from pathlib import Path

def normalize_unicode_quotes(path: str) -> str:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∫–∞–≤—ã—á–∫–∏ –≤ –ø—É—Ç—è—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–µ–∂–¥—É ASCII –∏ Unicode –∫–∞–≤—ã—á–∫–∞–º–∏.
    –ó–∞–º–µ–Ω—è–µ—Ç ASCII –ø—Ä—è–º—ã–µ –∫–∞–≤—ã—á–∫–∏ –Ω–∞ Unicode —Ñ–∏–≥—É—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ.
    –¢–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ –≤ CSV –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ –∫–∞–≤—ã—á–∫–∏.
    """
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º ASCII –ø—Ä—è–º—ã–µ –∫–∞–≤—ã—á–∫–∏ " –Ω–∞ Unicode —Ñ–∏–≥—É—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ "
    normalized = path.replace('"', '"').replace('"', '"')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–æ–ª–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫: –ø–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –≤–∏–¥–∞ '–°–ª–æ–≤–æ"'
    # –≥–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è –∫–∞–≤—ã—á–∫–∞
    pattern = r'([^"\w])([\w\u0400-\u04FF]+)"'
    matches = list(re.finditer(pattern, normalized))
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏
    for match in reversed(matches):
        start, end = match.span()
        prefix_char = match.group(1)  # –°–∏–º–≤–æ–ª –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º
        word = match.group(2)  # –°–ª–æ–≤–æ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫
        
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –æ–±–µ–∏–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏
        replacement = f'{prefix_char}"{word}"'
        normalized = normalized[:start] + replacement + normalized[end:]
    
    return normalized

def find_existing_path(original_path: str) -> str:
    """
    –ò—â–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –ø—Ä–æ–±—É—è —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–≤—ã—á–µ–∫.
    """
    # –ü—Ä–æ–±—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å
    if os.path.exists(original_path):
        return original_path
    
    # –ü—Ä–æ–±—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å
    normalized_path = normalize_unicode_quotes(original_path)
    if os.path.exists(normalized_path):
        return normalized_path
    
    # –ü—Ä–æ–±—É–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ ASCII –∫–∞–≤—ã—á–∫–∏ –Ω–∞ Unicode
    unicode_path = original_path.replace('"', '"')
    if os.path.exists(unicode_path):
        return unicode_path
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å
    return normalized_path

def fix_csv_file(input_file: str, output_file: str):
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É—Ç–∏ –≤ CSV —Ñ–∞–π–ª–µ, –ø—Ä–æ–≤–µ—Ä—è—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ.
    """
    fixed_count = 0
    total_count = 0
    not_found_count = 0
    
    print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {input_file}")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
    print("-" * 60)
    
    with open(input_file, 'r', encoding='utf-8', errors='ignore') as infile, \
         open(output_file, 'w', encoding='utf-8', newline='') as outfile:
        
        reader = csv.reader(infile, delimiter=';')
        writer = csv.writer(outfile, delimiter=';')
        
        for row_num, row in enumerate(reader, 1):
            if not row or len(row) < 1:
                writer.writerow(row)
                continue
            
            original_path = row[0]
            total_count += 1
            
            # –ò—â–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
            correct_path = find_existing_path(original_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –ø—É—Ç—å
            if original_path != correct_path:
                fixed_count += 1
                if row_num <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
                    print(f"–°—Ç—Ä–æ–∫–∞ {row_num}:")
                    print(f"  –ë—ã–ª–æ:  {repr(original_path)}")
                    print(f"  –°—Ç–∞–ª–æ: {repr(correct_path)}")
                    print()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            if not os.path.exists(correct_path):
                not_found_count += 1
                if not_found_count <= 3:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
                    print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {correct_path}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
            row[0] = correct_path
            writer.writerow(row)
            
            if row_num % 1000 == 0:
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {row_num}")
    
    print("-" * 60)
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_count}")
    print(f"   –ü—É—Ç–µ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {fixed_count}")
    print(f"   –§–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {not_found_count}")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {(fixed_count/total_count*100):.1f}%")

def main():
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python fix_csv_quotes.py <input_csv_file>")
        print("–ü—Ä–∏–º–µ—Ä: python fix_csv_quotes.py remaining_for_copy.csv")
        sys.exit(1)
    
    input_file = sys.argv[1]
    
    if not os.path.exists(input_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    input_path = Path(input_file)
    output_file = str(input_path.parent / f"{input_path.stem}_fixed{input_path.suffix}")
    
    try:
        fix_csv_file(input_file, output_file)
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: {output_file}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()