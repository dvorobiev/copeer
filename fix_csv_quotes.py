#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –≤ CSV —Ñ–∞–π–ª–∞—Ö.
–ò—â–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –¥–∏—Å–∫–µ –∏ –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø—É—Ç–∏.
"""

import os
import sys
import glob
from pathlib import Path

def find_real_path(problematic_path: str) -> str:
    """
    –ò—â–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫–µ, –∏—Å—Ö–æ–¥—è –∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –ø—É—Ç–∏.
    """
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    clean_path = problematic_path.strip('"').replace('""', '"').rstrip('"')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å
    if os.path.exists(clean_path):
        return clean_path
    
    # –ï—Å–ª–∏ –ø—Ä—è–º–æ–π –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–π
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø—É—Ç—å –Ω–∞ —á–∞—Å—Ç–∏
        path_parts = clean_path.split('/')
        
        # –ò—â–µ–º –æ—Ç –∫–æ—Ä–Ω—è, –ø—Ä–æ–≤–µ—Ä—è—è –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
        current_search = '/'
        
        for i, part in enumerate(path_parts[1:], 1):  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—É—Å—Ç—É—é —á–∞—Å—Ç—å
            if not part:  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —á–∞—Å—Ç–∏
                continue
                
            # –°—Ç—Ä–æ–∏–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å
            test_path = os.path.join(current_search, part)
            
            if os.path.exists(test_path):
                current_search = test_path
                continue
            
            # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø–∞–ø–∫–∏/—Ñ–∞–π–ª—ã
            parent_dir = current_search
            if os.path.exists(parent_dir) and os.path.isdir(parent_dir):
                # –ò—â–µ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–µ
                search_pattern = os.path.join(parent_dir, '*')
                candidates = glob.glob(search_pattern)
                
                best_match = None
                for candidate in candidates:
                    candidate_name = os.path.basename(candidate)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ö–æ–∂–µ—Å—Ç—å (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
                    clean_candidate = candidate_name.replace('"', '')
                    clean_part = part.replace('"', '')
                    
                    if clean_candidate == clean_part or clean_part in clean_candidate:
                        best_match = candidate
                        break
                
                if best_match:
                    current_search = best_match
                else:
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                    break
            else:
                break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å
        if os.path.exists(current_search) and current_search != '/':
            return current_search
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—É—Ç–∏ {clean_path}: {e}")
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π –ø—É—Ç—å
    return clean_path

def fix_csv_file(input_file: str, output_file: str):
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É—Ç–∏ –≤ CSV —Ñ–∞–π–ª–µ, –∏—â–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –Ω–∞ –¥–∏—Å–∫–µ.
    """
    fixed_count = 0
    total_count = 0
    
    print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {input_file}")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
    print("-" * 60)
    
    try:
        with open(input_file, 'r', encoding='utf-8', errors='ignore') as infile, \
             open(output_file, 'w', encoding='utf-8') as outfile:
            
            for line_num, line in enumerate(infile, 1):
                line = line.rstrip('\n\r')
                if not line:
                    outfile.write('\n')
                    continue
                
                total_count += 1
                
                # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –ø–µ—Ä–≤–æ–º—É —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π
                parts = line.split(';', 1)
                if len(parts) < 2:
                    outfile.write(line + '\n')
                    continue
                
                original_path = parts[0]
                rest_part = parts[1]
                
                # –ò—â–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å –Ω–∞ –¥–∏—Å–∫–µ
                real_path = find_real_path(original_path)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –ø—É—Ç—å
                if original_path != real_path:
                    fixed_count += 1
                    if fixed_count <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
                        print(f"–°—Ç—Ä–æ–∫–∞ {line_num}:")
                        print(f"  –ë—ã–ª–æ:  {repr(original_path)}")
                        print(f"  –°—Ç–∞–ª–æ: {repr(real_path)}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—É—Ç—å
                        if os.path.exists(real_path):
                            print(f"  ‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ")
                        else:
                            print(f"  ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (–æ—á–∏—â–µ–Ω –ø—É—Ç—å)")
                        print()
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø—É—Ç–µ–º
                fixed_line = real_path + ';' + rest_part
                outfile.write(fixed_line + '\n')
                
                if line_num % 1000 == 0:
                    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {line_num}")
        
        print("-" * 60)
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_count}")
        print(f"   –ü—É—Ç–µ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {fixed_count}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö: {(fixed_count/total_count*100):.1f}%")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        raise

def main():
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python fix_csv_quotes.py <input_csv_file>")
        print("–ü—Ä–∏–º–µ—Ä: python fix_csv_quotes.py remaining_for_copy.csv")
        sys.exit(1)
    
    input_file = sys.argv[1]
    
    if not os.path.exists(input_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    input_path = Path(input_file)
    output_file = str(input_path.parent / f"{input_path.stem}_fixed{input_path.suffix}")
    
    try:
        fix_csv_file(input_file, output_file)
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: {output_file}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()