#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –≤ CSV —Ñ–∞–π–ª–∞—Ö –ø—É—Ç–µ–º –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ.
–ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—Ç –∫–∞–≤—ã—á–∫–∏, –∞ –∏—â–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
"""

import os
import sys
import csv
import glob
from pathlib import Path

def find_real_path(broken_path: str) -> str:
    """
    –ò—â–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –¥–ª—è —Å–ª–æ–º–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç glob –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏.
    """
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞–≤—ã—á–∫–∏ –∏–∑ –ø—É—Ç–∏
    clean_path = broken_path.replace('"', '').replace('"', '').replace('"', '')
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø—É—Ç—å –Ω–∞ —á–∞—Å—Ç–∏
    parts = clean_path.split('/')
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ—Ä–Ω—è –∏ –∏–¥–µ–º –ø–æ —á–∞—Å—Ç—è–º
    current_path = '/'
    
    for i, part in enumerate(parts):
        if not part:  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —á–∞—Å—Ç–∏
            continue
            
        # –°—Ç—Ä–æ–∏–º –ø—É—Ç—å –¥–æ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
        test_path = os.path.join(current_path, part)
        
        if os.path.exists(test_path):
            current_path = test_path
        else:
            # –ò—â–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –∫–∞–≤—ã—á–∫–∞–º–∏
            parent_dir = current_path
            if os.path.exists(parent_dir):
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    items = os.listdir(parent_dir)
                    
                    # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –±–∞–∑–æ–≤–æ–º—É –∏–º–µ–Ω–∏ (–±–µ–∑ –∫–∞–≤—ã—á–µ–∫)
                    part_clean = part.replace('"', '').replace('"', '').replace('"', '')
                    
                    found = None
                    for item in items:
                        item_clean = item.replace('"', '').replace('"', '').replace('"', '')
                        if item_clean == part_clean:
                            found = item
                            break
                    
                    if found:
                        current_path = os.path.join(parent_dir, found)
                    else:
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á—Ç–æ –µ—Å—Ç—å
                        return broken_path
                except (PermissionError, OSError):
                    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á—Ç–æ –µ—Å—Ç—å
                    return broken_path
            else:
                return broken_path
    
    return current_path

def fix_csv_file(input_file: str, output_file: str):
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É—Ç–∏ –≤ CSV —Ñ–∞–π–ª–µ, –Ω–∞—Ö–æ–¥—è —Ä–µ–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ.
    """
    fixed_count = 0
    total_count = 0
    found_count = 0
    
    print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {input_file}")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
    print("-" * 60)
    
    with open(input_file, 'r', encoding='utf-8', errors='ignore') as infile, \
         open(output_file, 'w', encoding='utf-8', newline='') as outfile:
        
        reader = csv.reader(infile, delimiter=';')
        writer = csv.writer(outfile, delimiter=';', quoting=csv.QUOTE_MINIMAL)
        
        for row_num, row in enumerate(reader, 1):
            if not row or len(row) < 1:
                writer.writerow(row)
                continue
            
            original_path = row[0]
            total_count += 1
            
            # –ò—â–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
            real_path = find_real_path(original_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –ø—É—Ç—å
            if original_path != real_path:
                fixed_count += 1
                if row_num <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
                    print(f"–°—Ç—Ä–æ–∫–∞ {row_num}:")
                    print(f"  –ë—ã–ª–æ:  {repr(original_path)}")
                    print(f"  –°—Ç–∞–ª–æ: {repr(real_path)}")
                    print()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            if os.path.exists(real_path):
                found_count += 1
                if found_count <= 3:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
                    print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {real_path}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
            row[0] = real_path
            writer.writerow(row)
            
            if row_num % 1000 == 0:
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {row_num}")
    
    print("-" * 60)
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_count}")
    print(f"   –ü—É—Ç–µ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {fixed_count}")
    print(f"   –§–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {found_count}")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {(found_count/total_count*100):.1f}%")

def main():
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python fix_csv_quotes.py <input_csv_file>")
        print("–ü—Ä–∏–º–µ—Ä: python fix_csv_quotes.py remaining_for_copy.csv")
        sys.exit(1)
    
    input_file = sys.argv[1]
    
    if not os.path.exists(input_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    input_path = Path(input_file)
    output_file = str(input_path.parent / f"{input_path.stem}_fixed{input_path.suffix}")
    
    try:
        fix_csv_file(input_file, output_file)
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: {output_file}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()